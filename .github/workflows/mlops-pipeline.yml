name: MLOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Matrix test job with proper Python versions
  test:
    runs-on: ubuntu-22.04  # Changed from ubuntu-latest to avoid Ubuntu 24.04 issues
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']  # Fixed version format and removed unsupported versions
      fail-fast: false  # Continue other jobs even if one fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4  # Updated to v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: coverage.xml
        retention-days: 30

  # Separate lint job
  lint:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run flake8
      run: |
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: false
    
    - name: Check code formatting with black
      run: |
        black --check src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/
    
    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true  # Type checking warnings shouldn't fail the build

  # Security scanning
  security-scan:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Data pipeline validation
  data-pipeline:
    runs-on: ubuntu-22.04
    needs: [test, lint]
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate data processing pipeline
      run: |
        python -c "
        from src.data_processing.data_processor import DataProcessor
        from src.config.config_manager import ConfigManager
        print('✅ Data processing pipeline validation passed')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Model training validation
  model-training:
    runs-on: ubuntu-22.04
    needs: [test, lint]
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate model training pipeline
      run: |
        python -c "
        from src.fine_tuning.openai_fine_tuner import OpenAIFineTuner
        from src.config.config_manager import ConfigManager
        print('✅ Model training pipeline validation passed')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Model evaluation
  model-evaluation:
    runs-on: ubuntu-22.04
    needs: [data-pipeline, model-training]
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run model evaluation
      run: |
        python -c "
        from src.evaluation.model_evaluator import ModelEvaluator
        print('✅ Model evaluation pipeline validation passed')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Deployment validation
  deploy:
    runs-on: ubuntu-22.04
    needs: [model-evaluation]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate deployment components
      run: |
        python -c "
        from src.deployment.inference_server import create_inference_server
        print('✅ Deployment validation passed')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Notification job
  notify:
    runs-on: ubuntu-22.04
    needs: [test, lint, security-scan, data-pipeline, model-training, model-evaluation, deploy]
    if: always()
    
    steps:
    - name: Pipeline Status Notification
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
          echo "✅ MLOps Pipeline completed successfully!"
        else
          echo "❌ MLOps Pipeline failed. Check the logs above."
          exit 1
        fi
